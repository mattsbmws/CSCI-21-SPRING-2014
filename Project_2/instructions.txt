 Description:

The purpose of this assignment is to give you an opportunity to use static and dynamic arrays and to introduce you to object-oriented programming in C++.

For this project you will implement two classes, a data model and an array controller. You will also implement a driver and interface that allows your code to be tested interactively. The functionality of your classes will also be evaluated against the UNIT TEST for this project.

For the interactive test, you may use CinReader or your input handling functions (if applicable).

All of your functions must be robust. For example, functions that access arrays should not allow invalid index values..

    implement the following classes and driver:
        Prize (check UNIT TEST for required API)
            private data members: prizeName (string), prizeValue (unsigned int)
            public default constructor: initial values itemName ("NO NAME"), itemValue (0)
            public overloaded constructor: parameters for all data members
            public destructor: empty
            friend overloaded operator==: returns true if the prizeName and prizeValue of the two Prizes being compared are equivalent, else return false
            public accessors/gets and mutators/sets for all data members
        Box (check UNIT TEST for required API)
            private data members: boxNumber (unsigned int), boxColor (string), scratch (Prize), prizes (Prize*, for dynamic array), prizeCapacity (unsigned int), prizeCount (unsigned int)
            public default constructor: initial values boxNumber (0), boxColor ("NO COLOR"), prizeCapacity (5), prizeCount(0); in the definition, prizes array must be initialized to match prizeCapacity
            public overloaded constructor: parameters for boxNumber, boxColor, prizeCapacity; in the definition, prizes array must be initialized to match prizeCapacity
            public destructor: free memory associated with prizes
            public accessors/gets AND mutators/sets for boxNumber, boxColor
            public accessor/get ONLY for data members prizeCapacity, prizeCount
            public addPrize: parameters prize (Prize), return value (bool); place prize in prizes array if there is space and return true, else return false
            public getPrize: parameters index (unsigned int), return value Prize&; return a Prize if index is valid, else return scratch (data member declared in class header)
            public removePrize: parameters index (unsigned int), return value Prize; remove and return Prize if index is valid, else return scratch (data member declared in class header)
        driver
            instances of Prize and Box
            menu containing options to exercise all public functions in Prize and Box classes

Objectives:

    implement a data model class with private data members, constructors and destructor, and accessors and mutators
    implement an array controller class with dynamic arrays and private data members, constructors and destructor, accessors and mutators, and appropriate CRUD functionality
    implement a driver to demonstrate all of the functionality of classes
    write proper header and function documentation for C++ source code

Requirements:

!! If the program you submit does not compile and run you will receive an automatic zero (0) on this project. !!

    technical requirements:
        follow a consistent naming convention in all identifiers [25 pts]
        format your program source neatly and consistently [25 pts]
        write correct file header and function (description, all parameters, and return value) documentation; use this sample as a guide [50 pts]
        implement and submit a complete Makefile for this project that allows (1) the compilation of object files separately for each implementation file, (2) the compilation of the executable, (3) a clean option that deletes the object files, and (4) a cleanall option that deletes the object files and the executable. [100 pts]
        handle all user inputs robustly [50 pts]
    feature requirements:
        implement a driver and interface that allow for interactive testing of all functionality of Prize and Box [150 pts]
        pass all UNIT TESTS [35 tests @ 10 pts each = 350 pts]

Total points for this programming project:

750 points
